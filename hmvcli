                                           #!/usr/bin/python3
import argparse
import requests
from bs4 import BeautifulSoup
from prettytable import PrettyTable
import subprocess
import sys



class bcolors:
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    ENDC = '\033[0m'


parser = argparse.ArgumentParser(description='CLI tool for HackMyVM')
parser.add_argument('-m', '--machines', help='View machines by dificult. Ex: hmvcli.py -m easy | Options: easy/medium/hard/all')
parser.add_argument('-d', '--download', help='Download machine of hackmyvm. Ex: hmvcli.py -d Soul')
parser.add_argument('-i', '--input', help='Input the flag for machine. Ex: hmvcli.py -i flag -vm Soul')
parser.add_argument('-vm', '--vm', help='Machine name to insert the flag. Use with argument -i')
parser.add_argument('-c', '--config', action='store_true', help='Run the setup script to configure credentials')
args = vars(parser.parse_args())

if args['config']:
    print("[*] Ejecutando script de configuración...")
    subprocess.run(["bash", "setup.sh"])  
    sys.exit(0)


user=""#CHANGE
password=""#CHANGE

def machines(levelglob):
    color_map = {
        '#28a745': 'Easy',
        '#ffc107': 'Medium',
        '#dc3545': 'Hard'
    }

    machines_tab = PrettyTable(["Machine name", "Level", "Status", "Creator"])

    with requests.Session() as session:
        # LOGIN ON HACKMYVM
        login = "https://hackmyvm.eu/login/auth.php"
        data = {
            "admin": user,
            "password_usuario": password
        }
        login_send = session.post(login, data, allow_redirects=True)

        if "Logout" not in login_send.text:
            print("error")
            return
        else:
            print("login correcto")

        # GET MACHINE TABLE
        machines_url = "https://hackmyvm.eu/machines/"
        get_machines = session.get(machines_url)
        soup = BeautifulSoup(get_machines.text, 'html.parser')

        rows = soup.select("table.mt-1.table.table-striped.table-dark tbody tr")

        for row in rows:
            try:
                # Nombre
                name = row.find('h4', class_='vmname').text.strip()

                # Nivel según color
                color_style = row.find('div', style=lambda s: s and 'border-top' in s)['style']
                color = color_style.split('solid')[-1].strip().rstrip(';')
                level = color_map.get(color, 'Unknown')

                # Estado
                status_tag = row.find('span', class_='badge')
                status_text = status_tag.text.strip() if status_tag else "?"

                # Creador
                creator = row.find_all('td')[1].text.strip()

                # FILTRO
                if levelglob == "easy" and level != "Easy":
                    continue
                elif levelglob == "medium" and level != "Medium":
                    continue
                elif levelglob == "hard" and level != "Hard":
                    continue
                elif levelglob not in ["easy", "medium", "hard", "all"]:
                    continue

                color_status = bcolors.WARNING + status_text + bcolors.ENDC if "TO HACK" in status_text else bcolors.OKGREEN + status_text + bcolors.ENDC

                machines_tab.add_row([name, level, color_status, creator])

            except Exception as e:
                print(f"[!] Error con una máquina: {e}")
                continue

    print(machines_tab)



def download(machine_name):
    filename = str(machine_name).lower() + ".zip"
    url = f"https://downloads.hackmyvm.eu/{filename}"

    try:
        print(f"[+] Descargando {filename} desde HackMyVM...")
        r = requests.get(url, stream=True)
        r.raise_for_status()  

        with open(filename, "wb") as f:
            for chunk in r.iter_content(chunk_size=8192):
                f.write(chunk)

        print(f"[✓] {machine_name} ha sido descargada con éxito.")
    except requests.exceptions.HTTPError:
        print(f"[!] No se encontró la máquina '{machine_name}'. ¿Nombre mal escrito?")
    except Exception as e:
        print(f"[!] Error durante la descarga: {e}")


def sendFlag(flag, vm):
    with requests.Session() as session:
        login = "https://hackmyvm.eu/login/auth.php"
        data = {
            "admin": user,
            "password_usuario": password
        }
        login_send = session.post(login, data, allow_redirects=True)

        url_flag = "https://hackmyvm.eu/machines/checkflag.php"
        data_flag = {
            "flag": flag,
            "vm": vm
        }

        flag_send = session.post(url_flag, data_flag)
        if "wrong" in flag_send.text:
            print("[!] - The flag inserted is wrong!")
        elif "Correct" in flag_send.text:
            print("[+] - The flag inserted is CORRECT!")
        else:
            print("[!] - Error")



# ARGUMENTS

if args['machines'] == "easy":
    machines("easy")
if args['machines'] == "medium":
    machines("medium")
if args['machines'] == "hard":
    machines("hard")
if args['machines'] == "all":
    machines("all")

if args['download']:
    machine_name = args['download']
    download(machine_name)

if args['input']:
    if args['vm']:
        flag = args['input']
        vm = args['vm']
        sendFlag(flag, vm)
